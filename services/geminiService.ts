
import { GoogleGenAI, Modality } from "@google/genai";

if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable is not set.");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const getMimeType = (base64String: string): string | null => {
    const match = base64String.match(/^data:(image\/[a-zA-Z]+);base64,/);
    return match ? match[1] : null;
};

export const generateProductScene = async (
    productImageB64: string,
    logoImageB64: string,
    subject: string,
    scene: string
): Promise<string> => {

    const productMimeType = getMimeType(productImageB64);
    const logoMimeType = getMimeType(logoImageB64);

    if (!productMimeType || !logoMimeType) {
        throw new Error("Could not determine image mime type from base64 string.");
    }
    
    const productData = productImageB64.split(',')[1];
    const logoData = logoImageB64.split(',')[1];

    const model = 'gemini-2.5-flash-image';

    const prompt = `Create a photorealistic image. The scene is: '${scene}'. The subject is: '${subject}'. The subject is using the first provided image, which is a product. The second provided image is a logo that must be clearly and naturally placed onto the product. The final image should be a high-quality, seamless composition that looks like a real advertisement photo.`;

    try {
        const response = await ai.models.generateContent({
            model: model,
            contents: {
                parts: [
                    { inlineData: { data: productData, mimeType: productMimeType } },
                    { inlineData: { data: logoData, mimeType: logoMimeType } },
                    { text: prompt },
                ],
            },
            config: {
                responseModalities: [Modality.IMAGE, Modality.TEXT],
            },
        });

        if (response.candidates && response.candidates[0].content.parts) {
            for (const part of response.candidates[0].content.parts) {
                if (part.inlineData && part.inlineData.mimeType.startsWith('image/')) {
                    const base64ImageBytes = part.inlineData.data;
                    const mimeType = part.inlineData.mimeType;
                    return `data:${mimeType};base64,${base64ImageBytes}`;
                }
            }
        }
        throw new Error("No image was generated by the model.");

    } catch (error) {
        console.error("Error calling Gemini API:", error);
        throw new Error("Failed to generate image. Please check your inputs or API key.");
    }
};
